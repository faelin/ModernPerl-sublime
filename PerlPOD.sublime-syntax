%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Plain Old Documentation (POD)
file_extensions:
  - pod
scope: text.html.pod


variables:
  vertical_space: '\n\v\f\r\x{0085}\x{2028}\x{2029}'
  vert_class: '[{{vertical}}]'
  horz_class: '[\s&&[^{{vertical}}]]'

  block_end: '{{vert_class}}({{horz_class}}*{{vert_class}})+'

  com_spc: '\s{{horz_class}}*'
  com_end: '(?:{{block_end}}|{{com_spc}}(.*){{block_end}})'
  com_word: '[A-Za-z0-9]+'
  com_words: '(pod|cut|head\d+|over|back|item|begin|end|for|encoding)'
  com_silent: '(pod|back|over)'

  form_char: '[BCEFILSXZ]'
  bad_form_char: '[^BCEFILSXZ]'
  blank_form: '[XZ]'


contexts:
  immediately-pop:
    - match: ''
      pop: true

  clear-scopes:
    - match: ''
      clear_scopes: true
      scope: text.html.podf

  prototype:
    - match: '{{block_end}}'
      push: clear-scopes


  main:
    - match: '^=(?={{com_word}}\s)'
      comment: Command Paragraph (no underlines allowed in alpha-numeric command word)
      scope: punctuation.definition.keyword.pod
      push: command
    - match: '^(?=[\t ]{{horz_class}}*\S)'
      comment: Verbatim Paragraph
      push: verbatim
    - match: '(?=[A-Z]<)'
      comment: Ordinary Paragraph - punctuation codes [BCEFILSXZ]
      scope: markup.style.pod
      push: style


  command:
    - match: '(=)(head)(?=\d+{{com_end}})'
      comment: header command
      captures:
        1: punctuation.definition.keyword.pod
        2: markup.heading.pod
      push: header
    - match: '(=)(over)(?={{com_spc}}\d+{{com_end}})'
      comment: over command
      captures:
        1: punctuation.definition.keyword.pod
        2: keyword.control.indent.pod
      push: indent
    - match: '(=)(begin)(?={{com_end}})'
      comment: begin formatting block command
      scope: meta.function
      captures:
        1: punctuation.definition.keyword.pod
        2: markup.heading.pod
      push: format
    - match: '(=)(for)(?={{com_end}})'
      comment: inline formatting command
      captures:
        1: punctuation.definition.keyword.pod
        2: markup.heading.pod
      push: format
    - match: '(=)(encoding)(?={{com_end}})'
      comment: encoding declaration command
      captures:
        1: punctuation.definition.keyword.pod
        2: markup.heading.pod
      push: encoding
    - match: '(=)(pod)({{com_end}})'
      comment: pod command
      scope: meta.function
      captures:
        1: punctuation.definition.keyword.pod
        2: meta.block.begin keyword.control.block.begin.pod
        3: comment.line.pod
      pop: true
    - match: '(=)(cut)({{com_end}})'
      comment: cut command
      meta_scope: meta.block.end
      captures:
        1: punctuation.definition.keyword.pod
        2: meta.block.begin keyword.control.block.begin.pod
        3: comment.line.pod
    - match: '(=)(back)({{com_end}})'
      comment: back command outside of indent
      captures:
        1: punctuation.definition.keyword.pod
        2: invalid.illegal
        3: comment.line.pod
    - match: '(=)(item)({{com_end}})'
      comment: indent item outside of indent
      captures:
        1: punctuation.definition.keyword.pod
        2: invalid.illegal
        3: comment.line.pod
    - match: '(=)(end)({{com_end}})'
      comment: end formatting block command outside of formatting block
      captures:
        1: punctuation.definition.keyword.pod
        2: invalid.illegal
        3: comment.line.pod
    - match: '(=)({{com_word}})({{com_end}})'
      comment: unrecognized command
      captures:
        1: punctuation.definition.keyword.pod
        2: invalid.illegal
        3: comment.line.pod

  verbatim:
    - meta_scope: meta.paragraph.pod markup.raw.block.pod
    - match: '.*? (?= {{block_end}})'
      scope: markup.raw.block.pod
      pop: true

  style:
    - match: ''

  comment:
    - match: ''



